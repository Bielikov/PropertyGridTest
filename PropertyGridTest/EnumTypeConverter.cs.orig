using System;
using System.ComponentModel;
using System.Globalization;
using System.Reflection;

namespace PropertyGridUtils
{
   /// <summary>
   /// TypeConverter дл€ Enum, преобразовывающий енумы к строке с
   /// учетом атрибута DisplayName
   /// </summary>

   class EnumTypeConverter : EnumConverter
   {
           private Type _EnumType;

           /// <summary>
           /// »нициализирует экземпл€р
           /// </summary>
           /// <param name="type">тип енума</param>
           public EnumTypeConverter( Type type ) : base( type )
           {
               _EnumType = type;
           }

           public override bool CanConvertTo( ITypeDescriptorContext context,
                                              Type destType )
           {
               return destType == typeof ( string );
           }

           public override object ConvertTo( ITypeDescriptorContext context,
                                             CultureInfo culture,
                                             object value, Type destType )
           {
               FieldInfo fi = _EnumType.GetField( Enum.GetName( _EnumType, value ) );
               DescriptionAttribute dna =
                   ( DescriptionAttribute ) Attribute.GetCustomAttribute(
                       fi, typeof( DescriptionAttribute ) );

               if ( dna != null )
                   return dna.Description;
               else
                   return value.ToString();
           }

           public override bool CanConvertFrom( ITypeDescriptorContext context,
                                                Type srcType )
           {
               return srcType == typeof ( string );
           }

           public override object ConvertFrom( ITypeDescriptorContext context,
                                               CultureInfo culture,
                                               object value )
           {
               foreach ( FieldInfo fi in _EnumType.GetFields() )
               {
                   DescriptionAttribute dna =
                       ( DescriptionAttribute ) Attribute.GetCustomAttribute(
                           fi, typeof( DescriptionAttribute ) );

                   if ( ( dna != null ) && ( ( string ) value == dna.Description ) )
                       return Enum.Parse( _EnumType, fi.Name );
               }

               return Enum.Parse( _EnumType, ( string ) value );
           }

   }
}
